package holidayrequest;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.table.DefaultTableModel;

/**
 * @author camer
 */
public class HolidayRequestUI extends javax.swing.JFrame {

    /**
     * Creates new form HolidayRequestUI
     */
    public HolidayRequestUI() {
        initComponents();
        populateList(); //creates arraylist of employee data file
        getAllEmployees();//load data
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        detailsTable = new javax.swing.JTable();
        btnAddEmp = new javax.swing.JButton();
        btnSaveEmp = new javax.swing.JButton();
        txtboxSurname = new javax.swing.JTextField();
        txtboxAge = new javax.swing.JTextField();
        txtboxGender = new javax.swing.JTextField();
        txtboxRemaining = new javax.swing.JTextField();
        txtboxRequested = new javax.swing.JTextField();
        txtboxName = new javax.swing.JTextField();
        txtboxID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnRequest = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        detailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Forename", "Surname", "Age", "Gender", "Remaining", "Requested"
            }
        ));
        jScrollPane1.setViewportView(detailsTable);

        btnAddEmp.setText("Add");
        btnAddEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEmpActionPerformed(evt);
            }
        });

        btnSaveEmp.setText("Save");
        btnSaveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveEmpActionPerformed(evt);
            }
        });

        txtboxRequested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtboxRequestedActionPerformed(evt);
            }
        });

        jLabel1.setText("ID");

        jLabel2.setText("Name");

        jLabel3.setText("Surname");

        jLabel4.setText("Age");

        jLabel5.setText("Gender");

        jLabel6.setText("Holidays Remaining");

        btnRequest.setText("Request");
        btnRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestActionPerformed(evt);
            }
        });

        jLabel7.setText("Holidays Requested");

        jLabel8.setText("Enter employee data into these fields.");

        jLabel9.setText("Enter the amount of");

        jLabel10.setText("holidays into the ");

        jLabel11.setText("\"Holidays Requested\" field.");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel12.setText("Enter the ID of the employee");

        jLabel13.setText("that you wish to remove.");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel14.setText("Enter the ID of the employee");

        jLabel15.setText("that you wish to display.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel8))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel4)
                                                    .addComponent(jLabel5)
                                                    .addComponent(jLabel6)))
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel3))
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtboxAge)
                                            .addComponent(txtboxGender)
                                            .addComponent(txtboxRemaining)
                                            .addComponent(txtboxRequested)
                                            .addComponent(txtboxID, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtboxName)
                                            .addComponent(txtboxSurname)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnAddEmp)
                                        .addGap(24, 24, 24)
                                        .addComponent(btnSaveEmp))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnRequest)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel10)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15))))
                        .addGap(13, 13, 13)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 607, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtboxSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxRemaining, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtboxRequested, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAddEmp)
                            .addComponent(btnSaveEmp))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRequest)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel10)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDelete)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel13)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnSearch)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel15))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    //my variables here
    File file = new File("EmployeeData.txt");
    //end of variables
    
    //CODE FOR ADD EMPLOYEE BUTTON 
    private void btnAddEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEmpActionPerformed
        // RUNS WHEN YOU CLICK ADD
        
        boolean valid = false; //true when all below are true
        boolean emptyFields = false; //true when there are no empty fields
        boolean genderMF = false; //true when gender is either M or F
        boolean uniqueID = false; //prevents the creation of duplicate id's / false until dupe is found
        boolean flag = false; //exits method if any validation methods are false
        
        //imports EmployeeData file to validate id's
        //creates arraylist and array to store/handle employee data
        HRFile hrf = new HRFile();
        ArrayList<Employee> empList = new ArrayList<>(); //to validate id's
        empList = hrf.loadEmpsList();
        Employee[] emp = new Employee[empList.size()];
        emp = hrf.loadEmps();
        
        //validation loop
        while(flag == false){
            
            //validate fields to prevent empty elements
            if(txtboxID.getText().equals("") || txtboxName.getText().equals("") || txtboxSurname.getText().equals("") || txtboxAge.getText().equals("") || txtboxGender.getText().equals("") || txtboxRemaining.getText().equals(""))
            {
                //display error & break method
                JOptionPane.showMessageDialog(this, "Cannot accept empty fields!", "Error!", ERROR_MESSAGE);
                emptyFields = false;
                flag = true;
            }
            else
            {
                //if the user has left a field empty
                emptyFields = true;
            }

            //exception handling for gender
            if(txtboxGender.getText().length() >1 || !txtboxGender.getText().equals("M") && !txtboxGender.getText().equals("m") && !txtboxGender.getText().equals("F") && !txtboxGender.getText().equals("f"))
            {
                //display error & break method
                JOptionPane.showMessageDialog(this, "Please enter either M or F for gender!", "Error!", ERROR_MESSAGE);
                genderMF = false;
                flag = true;
            }
            else
            {
                //if gender is either M or F
                genderMF = true;
            }

            if(uniqueID == false)
            {
                for(int i=0; i<emp.length; i++)
                {
                    if(Integer.parseInt(txtboxID.getText()) == (emp[i].getId()))
                    {
                        JOptionPane.showMessageDialog(this, "Please enter a unique Employee ID!", "Error!", ERROR_MESSAGE);
                        uniqueID = false; //sets valid to false below
                        flag = true; //exits while loop
                        i = emp.length; //forces the for loop to stop checking
                    }
                    else
                    { 
                        uniqueID = true; //sets valid to true
                    }
                }
            }
        
        
        
            if(genderMF == true && emptyFields == true && uniqueID == true) // if all validation methods above are met
            {
                //if all above requirements (gender, id and no empty fields) have been met, allow program to continue 
                valid = true;
            }
            if (valid == true)
            { 
                //declare arraylist using a class as the <Generic>, then add to list
                ArrayList<Employee> employeeArrayList = new ArrayList<>();
                employeeArrayList.add(new Employee(Integer.parseInt(txtboxID.getText()), txtboxName.getText(), txtboxSurname.getText(), Integer.parseInt(txtboxAge.getText()), Character.toUpperCase(txtboxGender.getText().charAt(0)), Integer.parseInt(txtboxRemaining.getText()), Integer.parseInt(txtboxRequested.getText())));


                //intialise text field variables to add employee
                String name, surname;
                int id, age, holRem, holReq;
                char gender;


                //get the student info and assign using getters
                id = employeeArrayList.get(0).getId();
                name = employeeArrayList.get(0).getName();
                surname = employeeArrayList.get(0).getSurname();
                age = employeeArrayList.get(0).getAge();
                gender = employeeArrayList.get(0).getGender();
                holRem = employeeArrayList.get(0).getHolidaysRem();
                holReq = employeeArrayList.get(0).getHolidaysReq();


                //this is the array to populate the table
                Object[] row = {id, name, surname, age, gender, holRem, holReq};

                //send the array to the table to display
                DefaultTableModel model = (DefaultTableModel)detailsTable.getModel();
                model.addRow(row); 

                //clear text fields afterwards
                txtboxID.setText("");
                txtboxName.setText("");
                txtboxSurname.setText("");
                txtboxAge.setText("");
                txtboxGender.setText("");
                txtboxRemaining.setText("");
                txtboxRequested.setText("");

                //break while loop
                flag = true;
            } 
        }
    }//GEN-LAST:event_btnAddEmpActionPerformed

    private void txtboxRequestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtboxRequestedActionPerformed
        // code from txtboxRequested here
    }//GEN-LAST:event_txtboxRequestedActionPerformed

    private void btnSaveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveEmpActionPerformed

        //calls the save data method
        saveData();
    }//GEN-LAST:event_btnSaveEmpActionPerformed

    private void btnRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestActionPerformed
        // when pressed use the data in the id field to find an employee
        // and do the holiday calculations
        
        //instantiate interface CalculateHolidays
        RequestCalculations holCalc = new RequestCalculations();
        //instantiate overwrite
        OverwriteData od = new OverwriteData();
        //instantiate linearsearch
        LinearSearch ls = new LinearSearch();
        //instantiate employee class
        Employee emp = new Employee();
        
        String empID = txtboxID.getText();
        
        //1. import list of employee data
        //2. perform search and return position of record in list
        //3. edit record and overwrite old data with new
        //3.5 only overwrite if enough holidays remain
        //4. save new data in txt file and inform user of update
        
            //1.import
        HRFile hrf = new HRFile();
        HolidayRequestLog hrl = new HolidayRequestLog();
        //imports the list of employees
        ArrayList<Employee> empData = new ArrayList<>();
        empData = hrf.loadEmpsList();
        //empData = populateList(); needs array, found arrlist,wrote new loadEmpsList for this
        
        
        if(empID.equals("") || txtboxRequested.getText().equals(""))
        {
            //if the user doesnt enter a value into either field, return and error
            JOptionPane.showMessageDialog(null, "You must enter an employee ID and request an amount of holidays.", "Error!", ERROR_MESSAGE);
        }
        else
        {
            

            //create array version or empData arraylist
            Employee[] empArray = new Employee[empData.size()];
            empArray = empData.toArray(empArray);
            
            
        //2. perform search
            //imports the position of the employee, found in linear search
            ReturnSearch rs = new ReturnSearch();
            rs = ls.linearSearchID(empArray, Integer.parseInt(txtboxID.getText()));
            int position = rs.getPosition();
            
            
            if (position >= 0)
            {
                //sets vars to emp data from list, for use later
                int id = empData.get(position).getId();
                int holidaysRem = empData.get(position).getHolidaysRem();
                int oldReq = empData.get(position).getHolidaysReq();
                int holidaysReq = Integer.parseInt(txtboxRequested.getText());
                
                
                    //3.5 check remaining hols
                //holidays remaining = old amount - requested account
                //uses CalculateHolidays interface to do all calculations
                int newHolsRem = holCalc.calcHol(holidaysRem, holidaysReq);
                int newHolsReq = holCalc.calcReq(oldReq, holidaysReq);
                boolean authorized = holCalc.authorizeHol(newHolsRem);
                
                    //3 overwrite
                //create a unique file name for the request log for this employee
                String empName = empData.get(position).getName().concat(empData.get(position).getSurname());
                String logName = hrl.fileName(empName);
                //and a msg for in the file
                String logMsg = hrl.msgLog(empName, id, holidaysReq, authorized);
                hrf.WriteLog(logName, logMsg);
                
                
                //overwrites data in empData
                //empData.get(position).setHolidaysRem(newHolsRem);
                emp = empData.get(position);
                emp.setHolidaysRem(newHolsRem);
                emp.setHolidaysReq(newHolsReq);
                    //4 inform user
                if(authorized == true && newHolsRem  <= holidaysRem)
                {
                    //overwrites data in the file
                    od.overwriteData(empData, newHolsRem, position);
                    JOptionPane.showMessageDialog(this, empData.get(position).approveMsg(), "Holidays Approved!\nHoliday log has been updated/created.", INFORMATION_MESSAGE);              
                }
                else if (authorized == false || newHolsRem > holidaysRem)
                {
                    //display error if not enough holidays remain for employee
                    JOptionPane.showMessageDialog(this, "Holidays Denied.\nNot enough holidays remaining!\nHoliday log has been updated/created.", "Error!", ERROR_MESSAGE);
                }  
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Employee not found or does not exist!", "Error!", ERROR_MESSAGE);
            }
            //refresh table with updated data
            clearTable();
            getAllEmployees();
            
        }
    }//GEN-LAST:event_btnRequestActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // when delete button is pressed
        
        //get search key & instansiate delete class
        String key = txtboxID.getText();
        DeleteEmployee de = new DeleteEmployee();
        boolean success = false; //true if delete succeeded
        
        //empty field validation -in future, could have an empty field class to call in button events-
        if(txtboxID.getText().equals(""))
        {
            JOptionPane.showMessageDialog(this, "You must enter an ID!", "Error!", ERROR_MESSAGE);
        }
        else{
        
            //send employee id to the delete method
            success = de.deleteEmp(key);

            //refresh jTable display with new data
            clearTable();
            getAllEmployees();
            
            if (success == true)
            {   
                //alert user to changes
                JOptionPane.showMessageDialog(null, "Employee "+key+" deleted successfully.", "Success!", INFORMATION_MESSAGE);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Employee could not be found or does not exist.", "Employee not found", ERROR_MESSAGE);

            }
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // code for searching for an employee
        
        LinearSearch ls = new LinearSearch();
        ReturnSearch rs = new ReturnSearch();
        int key = Integer.parseInt(txtboxID.getText());
        
        HRFile hrf = new HRFile();
        //imports the list of employees
        ArrayList<Employee> empList = new ArrayList<>();
        empList = hrf.loadEmpsList();
        
        //sets arraylist to array for use here
        Employee[] empData = new Employee[empList.size()];
        empData = hrf.loadEmps();
        
        //perform search
        rs = ls.linearSearchID(empData, key);
        System.out.println(rs.getPosition());
        
        if(txtboxID.getText().equals(""))
        {
            //if field is left empty
            JOptionPane.showMessageDialog(this, "You must enter an ID!", "Error!", ERROR_MESSAGE);
        }

        if (rs.getPosition() >= 0 && rs.getPosition() <= empData.length)
        {
            //if record is found
            System.out.println("after if: "+rs.getPosition());
            //set pos = rs.getPos
            int position = rs.getPosition();
            
            //store emp record found in linear search
            Employee emp = new Employee(); 
            emp = empData[position];
            
            //display record to user
            JOptionPane.showMessageDialog(null, emp.showRecord(), "Employee Record", INFORMATION_MESSAGE);
        }
        else
        {
            //if record is not found
            JOptionPane.showMessageDialog(null, "Employee was not found or does not exist!" , "Employee not found", ERROR_MESSAGE);
        }
        
        
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private Employee[] populateList()
    {
        Employee[] empData = new Employee[100];
        HRFile hrf = new HRFile();
        empData = hrf.loadEmps();
        
        return empData;
    }
    
    private void clearTable(){
        
        //empties jTable
        DefaultTableModel tblModel = (DefaultTableModel) detailsTable.getModel();
        tblModel.setRowCount(0);
    }
    
    
    private void getAllEmployees() {
        // Check if the file exists in the system
        File file = new File("EmployeeData.txt");
        
        //temporary file for use when deleting employees
        File tempFile = new File("TempEmp.txt");
        if (file.exists()) {
            // Create Table Model object
            DefaultTableModel tblModel = (DefaultTableModel)detailsTable.getModel();
            
            try {
                // Read the file content
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                
                // Create an object 
                Object[] lines = br.lines().toArray();
                
                // Loop to add the content of the file into the rows
                for (int i = 0; i < lines.length; i++) {
                
                    // Create String array
                    String row[] = lines[i].toString().split(",");
                    tblModel.addRow(row);
                }
                fr.close();
                br.close();
            } 
            catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "File could not be loaded!", "Error!", ERROR_MESSAGE);
            }
        }
        if(!tempFile.exists()){
            try {
                //Create file
                tempFile.createNewFile();
            } 
            catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Could not create file!", "Error!", ERROR_MESSAGE);
            }
        }        
    }
    
     private void saveData() 
    {
        //method for saving records to disc
        //Set file path
        String filePath = "EmployeeData.txt";
        
        //create a new file object, pointing to the file
        File file = new File(filePath);
        
        //Check if the file exists in the system
        if(!file.exists()){
            try {
                //Create file
                file.createNewFile();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Could not create file!", "Error!", ERROR_MESSAGE);
            }
        }
        
        //check if the table has data
        if(detailsTable.getRowCount()== 0)
        {
            JOptionPane.showMessageDialog(this, "No data to save!", "Error!", ERROR_MESSAGE);
        }
        else{
            try {
                //append the table content to the file
                FileWriter fw = new FileWriter(file);
                
                //write to file
                BufferedWriter bw = new BufferedWriter(fw);

                //loop to write the table content
                for(int i = 0; i < detailsTable.getRowCount(); i++)
                {
                   //rows
                    
                    for(int j=0; j < detailsTable.getColumnCount(); j++)
                    {
                        //columns
                        //write table content into file /   , is delimiter
                        
                        bw.write(detailsTable.getValueAt(i,j).toString()+",");
                    }
                    //new line method terminates the line
                    bw.newLine();
                }
                //close writers
                bw.close();
                fw.close();
                
                JOptionPane.showMessageDialog(this, "Saved successfully!", "Success!", INFORMATION_MESSAGE);
                
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "A critical error has occurred...", "CRITICAL", ERROR_MESSAGE);
            }
            
        }
    }
    
    
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HolidayRequestUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HolidayRequestUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HolidayRequestUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HolidayRequestUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HolidayRequestUI().setVisible(true);
            }
        });
    }

    
    //premade jswing stuff
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddEmp;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRequest;
    private javax.swing.JButton btnSaveEmp;
    private javax.swing.JButton btnSearch;
    private javax.swing.JTable detailsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtboxAge;
    private javax.swing.JTextField txtboxGender;
    private javax.swing.JTextField txtboxID;
    private javax.swing.JTextField txtboxName;
    private javax.swing.JTextField txtboxRemaining;
    private javax.swing.JTextField txtboxRequested;
    private javax.swing.JTextField txtboxSurname;
    // End of variables declaration//GEN-END:variables




}



